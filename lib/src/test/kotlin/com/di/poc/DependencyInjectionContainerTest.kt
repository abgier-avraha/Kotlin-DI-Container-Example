/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.di.poc

import kotlin.test.Test
import kotlin.test.assertTrue
import kotlin.test.assertFailsWith

class DependencyInjectionContainerTest {
    
    @Test fun canInjectAndProvide() {
        val container = DependencyInjectionContainer()
        
        container
            .injectFactory<ILogger>({ parent -> Logger(parent) })
            .inject<IService, Service>()

        assertTrue(container.provide<IService>().someMethod())
        assertTrue(container.provide<IService>().logger != null)
    }

    @Test fun throwsWhenProvidingRemoved() {
        val container = DependencyInjectionContainer()
        
        container
            .injectFactory<ILogger>({parent -> Logger(parent) })
            .inject<IService, Service>()

        container.remove<IService>()

        assertFailsWith<Exception>(
            message = "Instance for interface com.di.poc.IService could not be fetched",
            block = {
                container.provide<IService>()
            }
        )
    }

    @Test fun singletonFactoriesUsesCorrectClass() {
        val container = DependencyInjectionContainer()
        
        container
            .injectFactory<ILogger>({parent -> Logger(parent)})

        val dummyLogger = container.provideFactory<ILogger, Dummy>()
        assertTrue(dummyLogger != null)

        // TODO: asseriton on print out
        dummyLogger.info("Hello World")
    }

    @Test fun factoryClassesAreCached() {
        val container = DependencyInjectionContainer()
        
        container
            .injectFactory<ILogger>({parent -> Logger(parent)})

        val dummyLoggerFirst = container.provideFactory<ILogger, Dummy>()
        val dummyLoggerSecond = container.provideFactory<ILogger, Dummy>()
        assertTrue(dummyLoggerFirst == dummyLoggerSecond)
    }
}

class Dummy {

}

interface ILogger {
    fun info(message: String)
}


class Logger : ILogger {
    private val parentClass: java.lang.Class<Any>

    constructor(parentClass: java.lang.Class<Any>) {
        this.parentClass = parentClass
    }

    override fun info(message: String) {
        println("${this.parentClass.getName()}::${message}")
    }
}

interface IService {
    val logger: ILogger

    fun someMethod(): Boolean
}

class Service : IService {
    override val logger: ILogger

    constructor(logger: ILogger) {
        this.logger = logger
    }

    override fun someMethod(): Boolean
    {
        return true
    }
}
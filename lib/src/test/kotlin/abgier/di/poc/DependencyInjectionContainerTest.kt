/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package abgier.di.poc

import kotlin.test.Test
import kotlin.test.assertTrue

class DependencyInjectionContainerTest {
    
    @Test fun canInjectAndProvide() {
        val container = DependencyInjectionContainer()
        
        container
            .addScoped<ILogger<Any>>({scope -> Logger(scope) as ILogger<Any>})
            .addSingleton<IService, Service>()

        assertTrue(container.provide<IService>().someMethod())
    }

    @Test fun scopedFactoriesUsesCorrectClass() {
        val container = DependencyInjectionContainer()
        
        container
            .addScoped<ILogger<Any>>({scope -> Logger(scope) as ILogger<Any>})

        val dummyLogger = container.provideScoped<ILogger<Dummy>, Dummy>()
        assertTrue(dummyLogger != null)

        dummyLogger.info("Hello World")
    }

    @Test fun scopedClassesAreCached() {
        val container = DependencyInjectionContainer()
        
        container
            .addScoped<ILogger<Any>>({scope -> Logger(scope) as ILogger<Any>})

        val dummyLoggerFirst = container.provideScoped<ILogger<Dummy>, Dummy>()
        val dummyLoggerSecond = container.provideScoped<ILogger<Dummy>, Dummy>()
        assertTrue(dummyLoggerFirst == dummyLoggerSecond)
    }
}

class Dummy {

}

interface ILogger<T> {
    fun info(message: String)
}


class Logger<T> : ILogger<T> {
    private val parentClass: java.lang.Class<T>

    constructor(parentClass: java.lang.Class<T>) {
        this.parentClass = parentClass
    }

    override fun info(message: String) {
        println("${this.parentClass.getName()}::${message}")
    }
}

interface IService {
    fun someMethod(): Boolean
}

class Service : IService {
    val logger: ILogger<Service>

    constructor(logger: ILogger<Service>) {
        this.logger = logger
    }

    override fun someMethod(): Boolean
    {
        this.logger.info("Hello World")
        return true
    }
}
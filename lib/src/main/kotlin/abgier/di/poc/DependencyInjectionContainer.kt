/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package abgier.di.poc

class DependencyInjectionContainer {
    // Key is class and vaue is instance
    val singletons = mutableMapOf<java.lang.Class<Any>, java.lang.Object>()

    // Key is class and value is a factory
    val singletonFactories = mutableMapOf<java.lang.Class<Any>, (java.lang.Class<Any>) -> java.lang.Object>()

    // Key is tuple of parent class and service class with instance as value
    val singletonFactoryCache = mutableMapOf<Pair<java.lang.Class<Any>, java.lang.Class<Any>>, java.lang.Object>()

    // TODO: how could this fit in a framework with lifecycles for instances?

    inline fun <reified TService>injectFactory(noinline instanceFactory: (java.lang.Class<Any>) -> TService): DependencyInjectionContainer {
        this.singletonFactories.put(TService::class.java as java.lang.Class<Any>, instanceFactory as (java.lang.Class<Any>) -> java.lang.Object)
        return this
    }

    
    inline fun <reified TService>inject(instance: Any): DependencyInjectionContainer {
        this.singletons.put(TService::class.java as java.lang.Class<Any>, instance as java.lang.Object)
        return this
    }

    inline fun <reified TService, reified TServiceInterface>inject(): DependencyInjectionContainer {
        val instance = ReflectionConstructor.construct<TService, TServiceInterface>(this.singletons, this.singletonFactories, this.singletonFactoryCache)
        this.singletons.put(TService::class.java as java.lang.Class<Any>, instance as java.lang.Object)
        return this
    }

    inline fun <reified TServiceInterface>provide() : TServiceInterface {
        // TODO: exception handling
        val service = this.singletons.get(TServiceInterface::class.java as java.lang.Class<Any>)
        return service as TServiceInterface
    }

    // TODO: generic type extends java.lang.Class<Any> to avoid casting
    inline fun <reified TServiceInterface, reified TParent>provideFactory() : TServiceInterface {
        var serviceInterface = TServiceInterface::class.java
        var parentClass = TParent::class.java
        
        // TODO: clean up this duplicate type find / create code and move to ReflectionConstructor
        // Check factory caches
        val matchingFactoryCache = this.singletonFactoryCache.get(
            Pair<java.lang.Class<Any>, java.lang.Class<Any>>(parentClass as java.lang.Class<Any>, serviceInterface as java.lang.Class<Any>))
        if (matchingFactoryCache != null) {
            return matchingFactoryCache as TServiceInterface
        }

        // Generate and cache factory class instance
        // TODO: exception handling
        val matchingFactory = this.singletonFactories.get(serviceInterface as java.lang.Class<Any>)
        val newFactoryObject = matchingFactory!!.invoke(parentClass)
        this.singletonFactoryCache.put(Pair<java.lang.Class<Any>, java.lang.Class<Any>>(parentClass as java.lang.Class<Any>, serviceInterface as java.lang.Class<Any>), newFactoryObject)
        return newFactoryObject as TServiceInterface
    }

    // TODO: .remove<TServiceInterface>
    // TODO: .remove(service)
    // TODO: also remove and references in to the interface in the caches
}

// TODO: move into parent
class ReflectionConstructor {

    // TODO: Create find type function to recursively find instances of types so that 
    // this function can decide whether to create new objects or not
    // Recursion is required if a factory class references another factory class in its
    // constructor
    companion object {
        inline fun <reified TService, reified TServiceInterface>construct(
            singletons: MutableMap<java.lang.Class<Any>, java.lang.Object>,
            singletonFactories: MutableMap<java.lang.Class<Any>, (java.lang.Class<Any>) -> java.lang.Object>,
            singletonFactoryCache: MutableMap<Pair<java.lang.Class<Any>, java.lang.Class<Any>>, java.lang.Object>
            ): TService {
            var serviceClass = TService::class.java
            var serviceInterface = TServiceInterface::class.java

            // TODO: exception handling
            // Retrieve constructor function
            val primaryConstructor = serviceInterface.getConstructors()[0]

            // Prepare list of args from existing services
            val params = mutableListOf<Any>()
            for (param in primaryConstructor.getParameters()) {
                // Check if parameter type is a singleton
                val matchingSingleton = singletons.get(param.type)
                if (matchingSingleton != null) {
                    params.add(matchingSingleton)
                }

                // Check if parameter type is a factory type and is cached
                val matchingFactoryCache = singletonFactoryCache.get(Pair<java.lang.Class<Any>, java.lang.Class<Any>>(serviceInterface as java.lang.Class<Any>, param.type as java.lang.Class<Any>))
                if (matchingFactoryCache != null) {
                    params.add(matchingFactoryCache)
                }

                // Check if parameter type is a factory type and generate it
                val matchingFactory = singletonFactories.get(param.type)
                if (matchingFactory != null) {
                    val newFactoryObject = matchingFactory.invoke(serviceInterface as java.lang.Class<Any>)
                    params.add(newFactoryObject)
                    singletonFactoryCache.put(Pair<java.lang.Class<Any>, java.lang.Class<Any>>(serviceInterface, param.type as java.lang.Class<Any>), newFactoryObject)
                }
            }

            // TODO: exception handling
            return primaryConstructor.newInstance(*params.toTypedArray()) as TService
        }
    }
}
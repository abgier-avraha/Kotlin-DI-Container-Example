// TODO: will attempt to run tests in parallel resulting in a 'port in use' error
// Do we randomise ports?
// Do we mock the transport to make requests directly to the server without the network?
// Do we somehow make requests directly to the server without the network?

/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package example

import container.DependencyInjectionContainer
import example.mocks.MockRandomProvider
import example.utils.IRandomProvider
import kotlin.test.Test
import kotlin.test.assertEquals
import org.http4k.client.ApacheClient
import org.http4k.core.HttpHandler
import org.http4k.core.Method
import org.http4k.core.Request
import org.http4k.server.Http4kServer

class RandomStringsIntegrationTest {

  @Test
  fun canGetRandomStrings() {
    // Arrange
    val container = DependencyInjectionContainer()
    StartServer(container)

    container.injectSingleton<IRandomProvider>(MockRandomProvider("<random>"))

    // Act
    val client = CreateClient()
    val res = client(Request(Method.GET, "http://localhost:8000/random-strings"))

    // Assert
    assertEquals("[\"<random>\",\"<random>\",\"<random>\"]", res.bodyString())
  }
}

fun CreateClient(): HttpHandler {
  return ApacheClient()
}

fun StartServer(container: DependencyInjectionContainer): Http4kServer {
  container.injectServices().injectHttpContextAccessor()
  val server = createServer(container)
  server.start()
  return server
}
